# -*- coding: utf-8 -*-
"""Fraud Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19VAjnjiaZLc7diQFMCvVGILVfqAFjRv0
"""

from google.colab import drive
drive.mount('/content/drive')

my_folder = "/content/drive/MyDrive/fraud_data"

import pandas as pd

df=pd.read_csv("/content/drive/MyDrive/fraud_data/creditcard.csv")
df.head()

pd.options.display.max_columns = None
df.head()

df.isnull().values.any()

df.duplicated().values.any()

df.shape

df.drop_duplicates()

df.shape

df.tail()

from sklearn.preprocessing import StandardScaler

scaler= StandardScaler()
df['Amount']= scaler.fit_transform(df[['Amount']])

df.drop(['Time'], axis=1, inplace=True)

df.head()

df.describe()

df.info()

import matplotlib.pyplot as plt
import seaborn as sns

sns.countplot(x=df['Class'])
plt.title('Class Distribution (0 = Normal, 1 = Fraud)')
plt.xlabel('Class')
plt.ylabel('Number of Transactions')
plt.show()

!pip install imblearn

from imblearn.over_sampling import SMOTE
from collections import Counter

X = df.drop('Class', axis=1)  # X = all features (without Class)
y = df['Class']               # y = the Class column (fraud or not)

print("Before balancing:", Counter(y))

smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

print("After balancing:", Counter(y_resampled))

from sklearn.ensemble import IsolationForest
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, precision_recall_curve, auc

# Commented out IPython magic to ensure Python compatibility.
# %whos

X_train = X_resampled[y_resampled == 0]  # Use only normal transactions to train

iso_forest = IsolationForest(contamination=0.01, random_state=42)
iso_forest.fit(X_train)

preds = iso_forest.predict(X_resampled)

import numpy as np

preds = np.where(preds == 1, 0, 1)  # Convert to 0 and 1

print("Confusion Matrix:")
print(confusion_matrix(y_resampled, preds))

print("\nClassification Report:")
print(classification_report(y_resampled, preds))

roc_auc = roc_auc_score(y_resampled, preds)
print(f"ROC AUC Score: {roc_auc:.4f}")

precision, recall, _ = precision_recall_curve(y_resampled, preds)
pr_auc = auc(recall, precision)

plt.plot(recall, precision, marker='.')
plt.title(f'Precision-Recall Curve (AUC={pr_auc:.4f})')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.show()